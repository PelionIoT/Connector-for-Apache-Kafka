syntax = "proto3";

package pelion;

option java_package = "com.pelion.protobuf";
option java_outer_classname = "PelionProtos";

message DeviceRequest {
  // Device Management Device ID.
  // (example: 015f3850a657000000000001001002ab)
  string ep = 1;
  // A client-generated ID that lets the client track the
  // end-to-end flow and prevents race conditions with the
  // notification channel. The async-id can be, for example, a
  // UUID or the web application session ID along with the device ID
  // and the resource.
  // (example 1-40 alphanumeric characters and dashes.)
  string async_id = 2;
  // The number of attempts to deliver the request to the device after
  // the first delivery attempt. For example, two retries sums up to the
  // total of three delivery attempts. When retries are exhausted,
  // Device Management discards the request and delivers an error in the
  // AsyncIDResponse. The default number of retries for a non-queue mode
  // device is 0. The default number of retries for a queue-mode device is 2.
  int32 retry = 3;
  // The time period during which the delivery is attempted, in seconds.
  // If the device is not reachable within this period, Device Management
  // discards the request and delivers an error in the AsyncIDResponse.
  // The default time period during which the delivery is attempted is "two
  // hours" for a non-queue mode device and "three days" for a queue-mode device.
  int64 expiry_seconds = 4;
  // The body element of the request
  message Body {
    // The method is one of GET, PUT, POST, DELETE.
    enum Method {
      GET = 0;
      PUT = 1;
      POST = 2;
      DELETE = 3;
    }
    Method method = 1;
    // The uri field is the path to the LwM2M object and can include query parameters.
    // This can include key-value pairs.
    // (example /5/0/1?key1=value1;key2=value2)
    string uri = 2;
    // The accept field defines the content type that the requesting client will accept.
    // (example text/plain)
    string accept = 3;
    // The content-type describes the content type of the base-64 encoded payload-b64 field.
    // (example text/plain)
    string content_type = 4;
    // The payload-b64 is the payload to send to the device in base-64 encoded form.
    // (example dmFsdWUxCg==)
    string payload_b64 = 5;
  }
  Body body = 5;
}

message NotificationData {
  // Device Management Device ID.
  // (example: 015f3850a657000000000001001002ab)
  string ep = 1;
  // URI path.
  // (example: /sen/light)
  string path = 2;
  // Content type.
  // (example: text/plain)
  string ct = 3;
  // Base64 encoded payload.
  // (example: My4zMQ==)
  string payload = 4;
  // Max age value is an integer number of seconds between 0 and
  // 2^32-1, but the actual maximum cache time is limited to 3 days.
  // (example: 60)
  int32 max_age = 5;
  // This is message ID, and can be used for duplicate detection.
  string uid = 6;
  // Timestamp of when notification was received.
  int64 timestamp = 7;
  // This is the endpoint_name from the device.
  string original_ep = 8;
}

message ResourceData {
  // Resource's URI path.
  // (example: /sen/light)
  string path = 1;
  // Interface description that defines a name or URI that indicates
  // how to interact with the target resource. It describes a generic
  // interface type, such as a 'sensor'.
  // (example: sensor)
  string if = 2;
  // Application-specific resource type that describes this resource.
  // It is created by the client side application. Not meant to be a
  // human-readable name for the resource. Multiple resource types may
  // be included, separated by a space.
  // (example: light_sensor)
  string rt = 3;
  // Content type.
  // (example: text/plain)
  string ct = 4;
  // Whether the resource is observable (true/false).
  // example: true
  bool obs = 5;
}

message EndpointData {
  // Device Management Device ID.
  // (example: 015f3850a657000000000001001002ab)
  string ep = 1;
  // If device registration is initiated with a self-provided endpoint name,
  // Device Management provides a new device ID for subsequent use. The new
  // platform-provided Device ID is forwarded as the 'ep' property and the
  // original self-provided one as the optional 'original-ep' property in a
  // registration notification. The name and ID can then be mapped accordingly.
  // Device Management saves the original endpoint name in the Device Directory
  // for future device registrations so you don't need to do mapping again.
  // (example: my-device-123)
  string original_ep = 2;
  // Endpoint type.
  // (example: Light)
  string ept = 3;
  // Queue mode (default value is false).
  // (example: false)
  bool q = 4;
  // List of lwm2m resources exposed by the endpoint.
  repeated ResourceData resource = 5;
  // Timestamp of when notification was received.
  int64 timestamp = 6;
}

message AsyncIDResponse {
  // The unique ID of the asynchronous response.
  // (example: 9e3c96b8-c4d7-496a-ab90-cc732b9b560e)
  string id = 1;
  // States whether sending a command to the device succeeded or failed.
  enum Status {
    NOOP = 0; // not used internal only to satisfy protobuf default value 0
    // Operation succeeded. The payload contains result of the operation from the device.
    SUCCESS = 200;
    // The device rejected the request, possibly because it does not support the request
    // method. See how the supported methods are configured for the device resources:
    // (https://developer.pelion.com/docs/device-management/current/resources/index.html).
    REQUEST_REJECTED = 400;
    // The device replied that it does not have the requested resource.
    RESOURCE_NOT_FOUND = 404;
    // Precondition failed and the operation was not executed. The device responded with
    // 4.12 CoAP response code. The device may reject a subscription request with this
    // response code.
    PRECONDITION_FAILED = 412;
    // Request entity is too large and could not be delivered to the device.
    ENTITY_TOO_LARGE = 413;
    // The device does not support the media type in the request.
    NOT_SUPPORTED_MEDIA_TYPE= 415;
    // An expired request was removed from queue (REQUEST_EXPIRED), the device requested
    // de-registration (DEVICE_REMOVED_REGISTRATION), or the device was suspended (DEVICE_BLOCKED).
    // The request was never delivered to the device.
    REQUEST_NOT_DELIVERED = 429;
    // The request to the device failed and the retry count was exceeded.
    // The last retry failed to establish TCP or TLS connection to the device.
    DEVICE_UNABLE_TO_CONNECT = 502;
    // The request to the device failed and the retry count was exceeded.
    // The last retry failed, because the device is currently unavailable (NOT_CONNECTED).
    DEVICE_NOT_CONNECTED = 503;
    // The request to the device failed and the retry count was exceeded.
    // The last retry failed, because the device did not respond in time
    // according to the protocol-specific retransmission logic (TIMEOUT).
    DEVICE_RESPONSE_TIMEOUT = 504;
  }
  Status status = 2;
  // An optional error message describing the error. Please refer to status listing above.
  // (example: TIMEOUT)
  string error = 3;
  // Requested data, base64 encoded.
  // (example: My4zMQ==)
  string payload = 4;
  // The content type.
  // (example: text/plain)
  string ct = 5;
  // Determines how long this value stays valid in the cache, in seconds.
  // 0 means that the value is not stored in the cache.
  // (example: 60)
  int32 max_age = 6;
}